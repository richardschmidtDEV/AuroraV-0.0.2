import gi
import json
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk


class VulnerabilityManager:

    def __init__(self, db_path="vulnerabilities.json"):
        self.db_path = db_path
        try:
            with open(self.db_path, 'r') as f:
                self.vulns = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            self.vulns = []

    def add_vuln(self, name, category, impact, description):
        vuln = {
            "name": name,
            "category": category,
            "impact": impact,
            "description": description
        }
        self.vulns.append(vuln)
        self.save_vulns()

    def get_vulns(self):
        return self.vulns

    def save_vulns(self):
        with open(self.db_path, 'w') as f:
            json.dump(self.vulns, f, indent=4)

class VulnerabilityManagementGUI(Gtk.Box):

    def __init__(self):
        super().__init__(spacing=10)
        self.manager = VulnerabilityManager()
        self.init_components()

    def init_components(self):
        # Entry widgets for adding vulnerabilities
        self.name_entry = Gtk.Entry()
        self.name_entry.set_placeholder_text("Vulnerability Name")

        self.category_entry = Gtk.Entry()
        self.category_entry.set_placeholder_text("Category")

        self.impact_entry = Gtk.Entry()
        self.impact_entry.set_placeholder_text("Impact")

        self.description_entry = Gtk.Entry()
        self.description_entry.set_placeholder_text("Description")

        self.add_button = Gtk.Button(label="Add Vulnerability")
        self.add_button.connect("clicked", self.add_vulnerability)

        # Text view for displaying vulnerabilities
        self.vuln_textview = Gtk.TextView()
        self.vuln_textview.set_editable(False)
        scroll = Gtk.ScrolledWindow()
        scroll.set_hexpand(True)
        scroll.set_vexpand(True)
        scroll.add(self.vuln_textview)

        # Button for generating report
        self.report_button = Gtk.Button(label="Generate Report")
        self.report_button.connect("clicked", self.generate_report)

        # Pack everything
        widgets = [self.name_entry, self.category_entry, self.impact_entry, self.description_entry, self.add_button,
                   scroll, self.report_button]
        for widget in widgets:
            self.pack_start(widget, True, True, 0)

    def add_vulnerability(self, widget):
        name = self.name_entry.get_text()
        category = self.category_entry.get_text()
        impact = self.impact_entry.get_text()
        description = self.description_entry.get_text()
        
        self.manager.add_vuln(name, category, impact, description)
        self.update_vuln_display()

    def update_vuln_display(self):
        vulns = self.manager.get_vulns()
        display_text = ""
        for vuln in vulns:
            display_text += f"Name: {vuln['name']}\nCategory: {vuln['category']}\nImpact: {vuln['impact']}\nDescription: {vuln['description']}\n\n"
        
        buffer = self.vuln_textview.get_buffer()
        buffer.set_text(display_text)

    def generate_report(self, widget):
        # For simplicity, this will display the vulnerabilities in the text view. Consider formatting for a proper report.
        self.update_vuln_display()


if __name__ == '__main__':
    win = Gtk.Window(title="Vulnerability Management")
    win.connect("destroy", Gtk.main_quit)
    vuln_mgmt_gui = VulnerabilityManagementGUI()
    win.add(vuln_mgmt_gui)
    win.show_all()
    Gtk.main()
